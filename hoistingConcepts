// 1
let y = 30;

function bar() {
  console.log(y);
  let y = 40;
}

bar();
// ReferenceError: Cannot access 'y' before initialization

// 2
const z = 10;
z = 30;
console.log(z);
// TypeError: Assignment to constant variable

// 3
var x = 10;
function foo() {
  if (true) {
    var x = 20;
    let y = 30;
    console.log(x, y); // 20 20
  }
  console.log(x); // 20
}
foo();

// 4
var x = 10;
function outer() {
  console.log(x); // undefined
  var x = 20;
}
outer();

// 5
var x = 10;
function foo() {
  var x = 20;
  console.log(x); // 20
}
foo();
console.log(x); // 10

// 6
function foo() {
  if (true) {
    var x = 10;
    let y = 20;
  }
  console.log(x); // 10
  console.log(y); // ReferenceError: y is not defined
}
foo();

// 7
function outer() {
  var x = 10;
  function inner() {
    console.log(x); // 10
  }
  return inner;
}
var innerFn = outer();
innerFn();

// 8
function foo() {
  var a = 5;
  if (true) {
    var a = 10;
    console.log(a); // 10
  }
  console.log(a); // 10
}
foo();

// 9
var a = 1;
function outer() {
  console.log(a); // undefined
  var a = 2;
  inner();
  function inner() {
    console.log(a); // 2
  }
}
outer();

// 10
function createFunctions() {
  var result = [];
  for (var i = 0; i < 5; i++) {
    result.push(function () {
      console.log(i);
    });
  }
  return result;
}
var functions = createFunctions();
for (var j = 0; j < functions.length; j++) {
  functions[j]();
}

// 11
console.log(x); // ReferenceError: x is not defined
let x = 10;

// 12
function outer() {
  var a = 10;
  function inner() {
    console.log(a); // 10
  }
  return inner;
}
var closureFunction = outer();
closureFunction();

// 13
function add(a) {
  return function (b) {
    return a + b;
  };
}
var addFive = add(5);
var result = addFive(3);
console.log(result); // 8

//  14
function foo() {
  foo();
}
foo();

// Uncaught RangeError: Maximum call stack size exceeded
